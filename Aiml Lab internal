# A* Graph Problem 
from queue import PriorityQueue

class Graph:
    def __init__(self):
        self.nodes = {}  # Stores the graph as an adjacency list

    def add_edge(self, from_node, to_node, cost):
        """ Adds an edge to the graph (bidirectional by default) """
        if from_node not in self.nodes:
            self.nodes[from_node] = []
        if to_node not in self.nodes:
            self.nodes[to_node] = []
        
        self.nodes[from_node].append((to_node, cost))
        self.nodes[to_node].append((from_node, cost))  # Uncomment for undirected graph

    def a_star(self, start, goal, heuristic):
        """ A* Search Algorithm """
        open_set = PriorityQueue()
        open_set.put((0, start))  # (f_score, node)
        
        came_from = {}  # To store the optimal path
        g_score = {node: float('inf') for node in self.nodes}
        g_score[start] = 0  # Cost from start to start is 0

        f_score = {node: float('inf') for node in self.nodes}
        f_score[start] = heuristic[start]  # Estimated total cost

        while not open_set.empty():
            _, current = open_set.get()

            if current == goal:
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(start)
                return path[::-1]  # Return reversed path

            for neighbor, cost in self.nodes[current]:
                temp_g_score = g_score[current] + cost

                if temp_g_score < g_score[neighbor]:  # Found a better path
                    came_from[neighbor] = current
                    g_score[neighbor] = temp_g_score
                    f_score[neighbor] = g_score[neighbor] + heuristic[neighbor]
                    open_set.put((f_score[neighbor], neighbor))

        return None  # No path found

# Example Graph
graph = Graph()
graph.add_edge("A", "B", 1)
graph.add_edge("A", "C", 4)
graph.add_edge("B", "C", 2)
graph.add_edge("B", "D", 5)
graph.add_edge("C", "D", 1)
graph.add_edge("D", "E", 3)

# Heuristic values (estimated cost to reach goal "E")
heuristic = {
    "A": 7, "B": 6, "C": 2, "D": 1, "E": 0
}

# Finding the shortest path from A to E
solution = graph.a_star("A", "E", heuristic)
print("Shortest Path:", solution)
