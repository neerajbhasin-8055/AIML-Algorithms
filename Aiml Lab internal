✅ Alpha-Beta Pruning (Minimax Optimization) 

def alpha_beta(node, depth, alpha, beta, maximizing):
    print(f"Node: {node}, DEPTH: {depth}, ALPHA: {alpha}, BETA: {beta}, MAXIMIZING: {maximizing}")
    if depth == 0 or not isinstance(node, list):
        return node

    if maximizing:
        value = float('-inf')
        for child in node:
            value = max(value, alpha_beta(child, depth - 1, alpha, beta, False))
            alpha = max(alpha, value)
            print(f"UPDATED ALPHA: {alpha}, VALUE: {value}")
            if alpha >= beta:
                print("Pruning remaining nodes...")
                break
        return value
    else:
        value = float('inf')
        for child in node:
            value = min(value, alpha_beta(child, depth - 1, alpha, beta, True))
            beta = min(beta, value)
            print(f"UPDATED BETA: {beta}, VALUE: {value}")
            if alpha >= beta:
                print("Pruning remaining nodes...")
                break
        return value

def build_tree(leaf_values, branching):
    def build(level_values, current_level):
        if current_level == 0:
            return level_values.pop(0)
        return [build(level_values, current_level - 1) for _ in range(branching)]
    values_copy = leaf_values.copy()
    return build(values_copy, levels - 1)

levels = int(input("Enter number of levels: "))
branching = int(input("Enter branching factor: "))
leaf_values = list(map(int, input("Enter leaf values: ").split()))
tree = build_tree(leaf_values, branching)
print("\nBest Outcome:", alpha_beta(tree, levels - 1, float('-inf'), float('inf'), True))

💧 Water Jug Problem (A Search)* 
import heapq

def heuristic(state, target):
    return abs(state[0] - target) + abs(state[1] - target)

def astar_waterjug(cap1, cap2, target):
    open_list = []
    visited = set()
    start = (0, 0)
    heapq.heappush(open_list, (0, start, []))
    solutions = []

    while open_list:
        _, current, path = heapq.heappop(open_list)
        if current in visited:
            continue
        visited.add(current)
        jug1, jug2 = current
        new_path = path + [current]
        if jug1 == target or jug2 == target:
            solutions.append(new_path)
        next_steps = {
            (cap1, jug2),
            (jug1, cap2),
            (0, jug2),
            (jug1, 0),
            (max(0, jug1 - (cap2 - jug2)), min(cap2, jug1 + jug2)),
            (min(cap1, jug1 + jug2), max(0, jug2 - (cap1 - jug1)))
        }
        for next_step in next_steps:
            if next_step not in visited:
                cost = 1 + heuristic(next_step, target)
                heapq.heappush(open_list, (cost, next_step, new_path))

    return solutions

cap1, cap2, target = 5, 3, 2
solutions = astar_waterjug(cap1, cap2, target)
if solutions:
    print("Multiple Solutions Found:")
    for i, sol in enumerate(solutions):
        print(f"Solution {i + 1}: {sol}")
else:
    print("No solution found.")

🧭 A on Grid* 

import heapq

class Node:
    def __init__(self, x, y, g, h):
        self.x, self.y, self.g, self.h = x, y, g, h
        self.f = g + h
        self.parent = None
    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    open_list, closed_set = [], set()
    heapq.heappush(open_list, Node(start[0], start[1], 0, heuristic(start, goal)))
    
    while open_list:
        current = heapq.heappop(open_list)
        if (current.x, current.y) == goal:
            path = []
            while current:
                path.append((current.x, current.y))
                current = current.parent
            return path[::-1]

        closed_set.add((current.x, current.y))
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current.x + dx, current.y + dy
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 and (x, y) not in closed_set:
                neighbor = Node(x, y, current.g + 1, heuristic((x, y), goal))
                neighbor.parent = current
                heapq.heappush(open_list, neighbor)
    return None

grid = [
    [0, 0, 0, 0, 1],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]
start, goal = (0, 0), (4, 4)
path = a_star(grid, start, goal)
print("Path:", path)

🔁 A on Graph* 

import heapq

class Node:
    def __init__(self, name, g, h):
        self.name, self.g, self.h = g, h
        self.name = name
        self.f = g + h
        self.parent = None
    def __lt__(self, other):
        return self.f < other.f

def a_star(graph, heuristics, start, goal):
    open_list, closed_set = [], set()
    start_node = Node(start, 0, heuristics[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.name)
        for neighbor, cost in graph[current_node.name].items():
            if neighbor in closed_set:
                continue
            g_cost = current_node.g + cost
            h_cost = heuristics[neighbor]
            neighbor_node = Node(neighbor, g_cost, h_cost)
            neighbor_node.parent = current_node
            heapq.heappush(open_list, neighbor_node)

    return None

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'D': 2},
    'C': {'A': 4, 'E': 5},
    'D': {'B': 2, 'E': 1},
    'E': {'C': 5, 'D': 1, 'F': 3, 'G': 2},
    'F': {'E': 3},
    'G': {'E': 2}
}
heuristics = {
    'A': 6, 'B': 5, 'C': 4, 'D': 3,
    'E': 2, 'F': 3, 'G': 0
}
path = a_star(graph, heuristics, 'A', 'G')
print("Shortest path:", path)

🧩 8-Tile Puzzle (A*) 

import heapq

def get_empty(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def heuristic(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_x, goal_y = divmod(state[i][j] - 1, 3)
                dist += abs(i - goal_x) + abs(j - goal_y)
    return dist

def get_neighbors(state):
    neighbors = []
    x, y = get_empty(state)
    for move, (dx, dy) in moves.items():
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append((new_state, move))
    return neighbors

def print_n(state):
    for row in state:
        print(" ".join(str(num) if num != 0 else " " for num in row))
    print()

def astar(initial_state):
    open_list = []
    visited = set()
    heapq.heappush(open_list, (heuristic(initial_state), 0, initial_state, []))

    while open_list:
        f, g, state, path = heapq.heappop(open_list)
        print(f"Move: {g}")
        print_n(state)

        if state == goal_state:
            return path

        state_tuple = tuple(map(tuple, state))
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for new_state, move in get_neighbors(state):
            new_state_tuple = tuple(map(tuple, new_state))
            if new_state_tuple not in visited:
                new_g = g + 1
                heapq.heappush(open_list, (new_g + heuristic(new_state), new_g, new_state, path + [move]))

    return None

goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
initial_state = [[1, 2, 3], [4, 0, 5], [6, 7, 8]]
moves = {"UP": (-1, 0), "DOWN": (1, 0), "LEFT": (0, -1), "RIGHT": (0, 1)}

solution = astar(initial_state)
print("Moves to solve:", solution)

✅ Map Coloring using Backtracking

def is_valid(graph, color, c, node):
    for neighbor in graph[node]:
        if color[neighbor] == c:
            return False
    return True

def map_coloring(graph, m, color, node):
    if node == len(graph):
        return True
    for c in range(1, m + 1):
        if is_valid(graph, color, c, node):
            color[node] = c
            if map_coloring(graph, m, color, node + 1):
                return True
            color[node] = 0
    return False

def solve_map_coloring():
    # Graph adjacency list (e.g., India's states or custom regions)
    graph = [
        [1, 2],     # Node 0 connected to 1 and 2
        [0, 2, 3],  # Node 1 connected to 0, 2, 3
        [0, 1, 3],  # Node 2 connected to 0, 1, 3
        [1, 2]      # Node 3 connected to 1 and 2
    ]
    m = 3  # Number of colors
    color = [0] * len(graph)

    if map_coloring(graph, m, color, 0):
        print("Coloring possible:", color)
    else:
        print("No solution found")

solve_map_coloring()

✅ N-Queens using Backtracking 

def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_nqueens_util(board, col, n):
    if col >= n:
        return True
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            if solve_nqueens_util(board, col + 1, n):
                return True
            board[i][col] = 0
    return False

def solve_nqueens(n):
    board = [[0] * n for _ in range(n)]
    if solve_nqueens_util(board, 0, n):
        for row in board:
            print(" ".join("Q" if x else "." for x in row))
    else:
        print("No solution found")

n = 8  # Change N here
solve_nqueens(n)

✅ Linear Regression (from scratch using NumPy) 

import numpy as np
import matplotlib.pyplot as plt

# Sample data
x = np.array([1, 2, 3, 4, 5])
y = np.array([3, 4, 2, 5, 6])

# Calculating slope (m) and intercept (c)
n = len(x)
m = (n * np.sum(x*y) - np.sum(x) * np.sum(y)) / (n * np.sum(x**2) - (np.sum(x))**2)
c = (np.sum(y) - m * np.sum(x)) / n

print(f"Equation: y = {m:.2f}x + {c:.2f}")

# Predict values
y_pred = m * x + c

# Plotting the results
plt.scatter(x, y, color='red', label='Actual Data')
plt.plot(x, y_pred, color='blue', label='Regression Line')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.title('Linear Regression')
plt.show()
